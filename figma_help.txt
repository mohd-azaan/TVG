Guide to the Dev Mode MCP Server ‚Äì Figma Learn - Help Center
Figma
Learn
Get started
Product documentation
Administration
Courses, tutorials, projects
Help
enter
to select
‚Üë
‚Üì
to navigate
esc
to close
Figma Design
Design and prototype in one place
Dev Mode
Translate designs into code
FigJam
Collaborate with a digital whiteboard
Figma Slides
Co-create presentations
Figma Draw
New
Illustrate with advanced vector tools
Figma Buzz
Beta
Produce on-brand assets at scale
Figma Sites
Beta
Publish fully responsive websites
Figma Make
Prompt to code anything you can imagine
AI
Explore all Figma AI features
Work across Figma
Learn how Figma tools work together
Developer docs
Work with APIs, embeds, and more
Figma Community
Discover resources from other Figma creators
For everyone
Account
Manage settings
Change preferences
Files and projects
Use the file browser
Manage files and projects
Sharing and permissions
For administration
Billing
Overview
Manage seats
Manage your plan
Pay for Figma
Teams
Manage a team
Organizations
Overview
Login and authentication
Deploy Figma
Members and guests
Teams
Libraries and resources
Enterprise
Billing groups
Workspaces
Security features
Find out more
Courses
New
Level up your Figma skills with these comprehensive skill-based courses.
Projects
Get hands-on experience in Figma with these practical bite-sized projects.
Tutorials
Explore tools and features by watching and following along with these expert-led video tutorials.
Get solutions
Troubleshoot
Get help with common issues and troubleshoot unexpected behavior.
Work with support
Submit a bug report, get help collecting log files, and find your system information.
Common questions
Get answers to frequently asked questions.
Figma Community Forum
Ask the community, share ideas, and connect with other Figma users.
Get started
Product documentation
Products
Figma Design
Dev Mode
FigJam
Figma Slides
Figma Draw
New
Figma Sites
Beta
Figma Make
Figma Buzz
Beta
Features
AI
Work across Figma
Developer docs
Figma Community
Administration
For everyone
Account
Files and projects
For administration
Billing
Teams
Organizations
Enterprise
Courses, tutorials, projects
Find out more
Courses
Projects
Tutorials
Help
Get solutions
Troubleshoot
Work with support
Common questions
Figma Community Forum
document.body.classList.add("article_page");
Figma Learn - Help Center
Figma Design
Dev Mode
Turn designs to code
Guide to the Dev Mode MCP Server
üöß The Dev Mode MCP Server is currently in
open beta
. Some functions and settings may not yet be available. The feature may change and you may experience bugs or performance issues during the beta period.
Before you start
Who can use this feature
The Dev Mode MCP Server is in open beta.
Available on a
Dev or Full seat
on the
Professional, Organization, or Enterprise plans
You must use a code editor or application that supports MCP Servers (i.e. VS Code, Cursor, Windsurf, Claude Code)
You can only use the Dev Mode MCP server from the Figma desktop app.
Download the Figma desktop app ‚Üí
The Dev Mode MCP Server brings Figma directly into your workflow by providing important design information and context to AI agents generating code from Figma design files.
MCP Servers are part of a standardized interface for AI agents to interact with data sources using the
Model Context Protocol
.
Learn more about the Dev Mode MCP Server and bringing Figma into your workflow ‚Üí
With the server enabled, you can:
Generate code from selected frames
Select a Figma frame and turn it into code. Great for product teams building new flows or iterating on app features.
Extract design context
Pull in variables, components, and layout data directly into your IDE. This is especially useful for design systems and component-based workflows.
Code smarter with Code Connect
Boost output quality by reusing your actual components. Code Connect keeps your generated code consistent with your codebase.
Learn more about Code Connect ‚Üí
Step 1: Enable the MCP Server
Open the
Figma desktop app
and make sure you‚Äôve
updated to the latest version
.
Create or open a Figma Design file.
In the upper-left corner, open the Figma menu.
Under
Preferences
, select
Enable local MCP Server
.
You should see a confirmation message at the bottom of the screen letting you know the server is enabled and running.
The server runs locally at
http://127.0.0.1:3845/mcp
. Keep this address handy for your configuration file in the next step.
Step 2: Set up your MCP client
Once the server is running locally on the Figma desktop app, MCP clients will be able to connect to your server. Follow the instructions for your specific client to add the Dev Mode MCP server.
VS Code
Cursor
Windsurf
Claude Code
Other editors
Use the shortcut
‚åò Shift P
to search for
MCP:Add Server
.
Select
HTTP
.
Paste the server url
http://127.0.0.1:3845/mcp
in the search bar, then hit
Enter
.
Type in
Figma Dev Mode MCP
when it asks for a Server ID, then hit
Enter
.
Select whether you want to add this server globally or only for the current workspace. Once confirmed, you'll see a configuration like this in your
mcp.json
file:
{
   "servers": {
     "Figma Dev Mode MCP": {
       "type": "http",
       "url": "http://127.0.0.1:3845/mcp"
     }
   }
 }
Open the chat toolbar using
‚å•‚åòB
or
‚åÉ‚åòI
and switch to
Agent
mode.
With the chat open, type in
#get_code
to confirm that the Dev Mode MCP server tools are available. If no tools are listed, restart the Figma desktop app and VS Code.
Note:
You must have
GitHub Copilot
enabled on your account to use MCP in VS Code.
For more information, see
VS Code‚Äôs official documentation
.
Open
Cursor ‚Üí Settings ‚Üí Cursor Settings
.
Go to the
MCP
tab.
Click
+ Add new global MCP server
.
Enter the following configuration and save:
{
  "mcpServers": {
    "Figma": {
      "url": "http://127.0.0.1:3845/mcp"
    }
  }
}
For more information, see
Cursor‚Äôs official documentation
.
Open
Windsurf ‚Üí Settings ‚Üí Windsurf Settings
or use the shortcut
‚åò ,
.
Navigate to
Cascade settings
and select
Open plugin store
.
Search for
Figma
and install the plugin.
Open
Cascade
and you should see the Figma MCP server and available tools.
For more information, see
Windsurf‚Äôs official documentation
.
Note:
For Windsurf, change the
url
property in the configuration file to
serverUrl
to avoid errors.
Open your terminal and run:
claude mcp add --transport http figma-dev-mode-mcp-server http://127.0.0.1:3845/mcp
Use the following commands to check MCP settings and manage servers:
List all configured servers
claude mcp list
Get details for a specific server
claude mcp get my-server
Remove a server
claude mcp remove my-server
For more information, see
Anthropic‚Äôs official documentation
.
Other code editors and tools that support SSE (Server-Sent Events) can also connect to the Dev Mode MCP server.
If you're using a different editor or tool, check its documentation to confirm it supports SSE-based communication. If it does, you can manually add the Dev Mode MCP server using this configuration:
{
  "mcpServers": {
    "Figma Dev Mode MCP": {
      "url": "http://127.0.0.1:3845/mcp"
    }
  }
}
Note:
The Dev Mode MCP server communicates over the SSE protocol. Use your editor‚Äôs steps for setting up an SSE-compatible MCP server, and use the URL:
http://localhost:3845/mcp
Once configured, refresh or start the server. You should see a successful connection and the available tools. If the connection failed or you do not see any tools, double check that the server is active in the Figma desktop app.
Step 3: Prompt your MCP client
The Dev Mode MCP server introduces a set of tools that help LLMs translate designs in Figma. Once connected, you can prompt your MCP client to access a specific design node.
There are two ways to provide Figma design context to your AI client:
Selection-based
Select a frame or layer inside Figma using the desktop app.
Prompt your client to help you implement your current selection.
Link-based
Copy the link to a frame or layer in Figma.
Prompt your client to help you implement the design at the selected URL.
Note:
Your client won‚Äôt be able to navigate to the selected URL, but it will extract the node-id that is required for the MCP server to identify which object to return information about.
Tools and usage suggestions
get_code
Use this to generate code for your Figma selection using the MCP server. The default output is
React + Tailwind
, but you can customize this through your prompts:
Change the framework
‚ÄúGenerate my Figma selection in Vue.‚Äù
‚ÄúGenerate my Figma selection in plain HTML + CSS.‚Äù
‚ÄúGenerate my Figma selection in iOS.‚Äù
Use your components
‚ÄúGenerate my Figma selection using components from src/components/ui‚Äù
‚ÄúGenerate my Figma selection using components from src/ui and style with Tailwind‚Äù
You can paste links or select the frame or component in Figma before prompting.
Learn how to set up Code Connect for better component reuse ‚Üí
get_variable_defs
Returns variables and styles used in your selection‚Äîlike colors, spacing, and typography.
List all tokens used
‚ÄúGet the variables used in my Figma selection.‚Äù
Focus on a specific type
‚ÄúWhat color and spacing variables are used in my Figma selection?‚Äù
Get both names and values
‚ÄúList the variable names and their values used in my Figma selection.‚Äù
get_code_connect_map
Retrieves a mapping between Figma node IDs and their corresponding code components in your codebase. Specifically, it returns an object where each key is a Figma node ID, and the value contains:
codeConnectSrc
: The location of the component in your codebase (e.g., a file path or URL).
codeConnectName
: The name of the component in your codebase.
This mapping is used to connect Figma design elements directly to their React (or other framework) implementations, enabling seamless design-to-code workflows and ensuring that the correct components are used for each part of the design. If a Figma node is connected to a code component, this function helps you identify and use the exact component in your project.
get_screenshot
This takes a screenshot of your selection to preserve layout fidelity. Keep this on unless you‚Äôre managing token limits.
create_design_system_rules
Use this tool to create a rule file that gives agents the context they need to generate high-quality front end code. Rule files help align output with your design system and tech stack, improving accuracy and ensuring code is tailored to your needs.
After running the tool, save the output to the appropriate
rules/
or
instructions/
directory so your agent can access it during code generation.
get_metadata
Returns an XML representation of your selection containing basic properties such as layer IDs, names, types, position and sizes. You can use
get_code
on the resulting outline to retrieve only the styling information of the design you need.
This is useful for very large designs where
get_code
produces output with a large context size. It also works with multiple selections or the whole page if nothing is selected.
Dev Mode MCP Server Settings
These are additional settings you can toggle under Preferences and use with the MCP client
Enable Code Connect
Includes Code Connect mappings in the response, so the generated code can reuse components from your connected codebase where possible.
Image settings
Use placeholder images:
Skips image extraction and adds generic placeholders instead - helpful if you prefer swapping them manually in code. Otherwise, it pulls real images from your file.
Use local image server:
Uses local images, adds a localhost link to the returned markup, allowing you to use the actual image asset wherever your file is rendered.
Download:
Allows the MCP server to download and write image assets (e.g. icons, images) from Figma into the user‚Äôs project.
As you use the Dev Mode MCP server, you may see a popup inside Figma asking you for feedback. To give us feedback,
please use this form
.
MCP best practices
The quality of the generated code depends on several factors. Some controlled by you, and some by the tools you‚Äôre using. Here are some suggestions for clean, consistent output.
Structure your Figma file for better code
Provide the best context for your design intent, so the MCP and your AI assistant can generate code that‚Äôs clear, consistent, and aligned with your system.
Use components
for anything reused (buttons, cards, inputs, etc.)
Link components to your codebase
via Code Connect. This is the best way to get consistent component reuse in code. Without it, the model is guessing.
Use variables
for spacing, color, radius, and typography.
Name layers semantically
(e.g.
CardContainer
, not
Group 5
)
Use Auto layout
to communicate responsive intent.
Tip:
Resize the frame in Figma to check that it behaves as expected before generating code.
Use annotations and dev resources
to convey design intent that‚Äôs hard to capture from visuals alone, like how something should behave, align, or respond.
Write effective prompts to guide the AI
MCP gives your AI assistant structured Figma data, but your prompt drives the result. Good prompts can:
Align the result with your framework or styling system
Follow file structure and naming conventions
Add code to specific paths (e.g.
src/components/ui
)
Add or modify code in existing files instead of creating new ones
Follow specific layout systems (e.g. grid, flexbox, absolute)
Examples:
‚ÄúGenerate iOS SwiftUI code from this frame‚Äù
‚ÄúUse Chakra UI for this layout‚Äù
‚ÄúUse
src/components/ui
components‚Äù
‚ÄúAdd this to
src/components/marketing/PricingCard.tsx
"
‚ÄúUse our
Stack
layout component‚Äù
Think of prompts like a brief to a teammate. Clear intent leads to better results.
Trigger specific tools when needed
The MCP supports different tools, and each one provides your AI assistant with a different kind of structured context. Sometimes, the assistant doesn‚Äôt automatically pick the right one, especially as more tools become available. If results are off, try being explicit in your prompt.
get_code
provides a structured
React + Tailwind
representation of your Figma selection. This is a starting point that your AI assistant can translate into any framework or code style, depending on your prompt.
get_variable_defs
extracts the variables and styles used in your selection (color, spacing, typography, etc). This helps the model reference your tokens directly in the generated code.
For example, if you‚Äôre getting raw code instead of tokens, try something like:
‚ÄúGet the variable names and values used in this frame.‚Äù
Add custom rules
Set project-level guidance to keep output consistent‚Äîjust like onboarding notes for a new developer. These are things like:
Preferred layout primitives
File organization
Naming patterns
What not to hardcode
You can provide this in whatever format your MCP client uses for instruction files.
Examples:
Cursor
Claude Code
General rules
---
description: Figma Dev Mode MCP rules
globs: 
alwaysApply: true
---
 ¬†- The Figma Dev Mode MCP Server provides an assets endpoint which can serve image and SVG assets
 ¬†- IMPORTANT: If the Figma Dev Mode MCP Server returns a localhost source for an image or an SVG, use that image or SVG source directly
 ¬†- IMPORTANT: DO NOT import/add new icon packages, all the assets should be in the Figma payload
 ¬†- IMPORTANT: do NOT use or create placeholders if a localhost source is provided
# MCP Servers
## Figma Dev Mode MCP Rules
 ¬†- The Figma Dev Mode MCP Server provides an assets endpoint which can serve image and SVG assets
 ¬†- IMPORTANT: If the Figma Dev Mode MCP Server returns a localhost source for an image or an SVG, use that image or SVG source directly
 ¬†- IMPORTANT: DO NOT import/add new icon packages, all the assets should be in the Figma payload
 ¬†- IMPORTANT: do NOT use or create placeholders if a localhost source is provided
- IMPORTANT: Always use components from `/path_to_your_design_system` when possible
- Prioritize Figma fidelity to match designs exactly
- Avoid hardcoded values, use design tokens from Figma where available
- Follow WCAG requirements for accessibility
- Add component documentation
- Place UI components in `/path_to_your_design_system`; avoid inline styles unless truly necessary
Adding these once can dramatically reduce the need for repetitive prompting and ensures that teammates or agents consistently follow the same expectations.
Be sure to check your IDE or MCP client‚Äôs documentation for how to structure rules, and experiment to find what works best for your team. Clear, consistent guidance often leads to better, more reusable code with less back-and-forth.
Break down large selections
Break screens into smaller parts (like components or logical chunks) for faster, more reliable results.
Large selections can slow the tools down, cause errors, or result in incomplete responses, especially when there's too much context for the model to process. Instead:
Generate code for smaller sections or individual components (e.g. Card, Header, Sidebar)
If it feels slow or stuck, reduce your selection size
This helps keep the context manageable and results more predictable, both for you and for the model.
If something in the output doesn‚Äôt look quite right, it usually helps to revisit the basics: how the Figma file is structured, how the prompt is written, and what context is being sent. Following the best practices above can make a big difference, and often leads to more consistent, reusable code.
Was this article helpful?
Yes
No
Help Center feedback
Got a second? Tell us what we‚Äôre doing well.
Submit article feedback
Your feedback helps us improve Figma‚Äôs Help Center. To get help from support,
submit a request through our contact form
.
Help Center feedback
Thanks for letting us know! What was the issue?
-- Please choose an option --
Incorrect or missing information
Hard to understand
There are typos or broken links
Issues with images, GIFs, or videos
I wish the feature worked a different way
Something else
Submit article feedback
Your feedback helps us improve Figma‚Äôs Help Center. To get help from support,
submit a request through our contact form
.
Thank you for helping us improve Figma‚Äôs Help Center!
document.onreadystatechange = () => {
    if (document.readyState === "complete") {
      const voteButtonUp = document.querySelector(".article-vote-up");
      const voteButtonDown = document.querySelector(".article-vote-down");
      const successMessage = document.querySelector("#feedback-success");
      const voteUpForm = document.querySelector("#article-vote-up-form");
      const voteDownForm = document.querySelector("#article-vote-down-form");

      async function submitRequest(e) {
        const formData = new FormData(e.target);
        const form = Object.fromEntries(formData);
        const reason = form.reason || "";

        let body = {
          request: {
            subject: form.subject,
            comment: { body: form.description },
            custom_fields: [{id: 14017850592535, "value": form.url}, {id: 17164389590039, "value": reason}, {id: 17350912268695, "value": form.locale }],
            ticket_form_id: 14017867691287,
          }
        }

        let headers = new Headers();
        headers.append("Content-Type", "application/json");
        headers.append("Accept", "application/json");

        if ("false" == "false") {
          body.request.requester = { name: "Anonymous" };
          await fetch("/hc/api/internal/csrf_token.json")
            .then(data => { return data.json();})
            .then(res => {
              headers.append("X-CSRF-Token", res.current_session.csrf_token);
              headers.append("X-REQUESTED-WITH", "XMLHttpRequest");
            });
        } else {
          await fetch("/api/v2/users/me.json")
            .then(data => { return data.json();})
            .then(res => { headers.append("X-CSRF-Token", res.user.authenticity_token);});
        }

        await fetch("/api/v2/requests", {
          method: "POST",
          headers: headers,
          body: JSON.stringify(body),
        }).then(res => {
          if (res.status == 201) {
            voteUpForm.classList.add("hide");
            voteDownForm.classList.add("hide");
            successMessage.classList.remove("hide");
          }
          else {
            console.log("Error submitting request");
          }
        });
      }

      voteUpForm.addEventListener("submit", (e) => {
        e.preventDefault();
        submitRequest(e);
        return false;
      });
      voteDownForm.addEventListener("submit", (e) => {
        e.preventDefault();
        submitRequest(e);
        return false;
      });

      const observer = new MutationObserver(() => {
        if(!successMessage.matches(".hide")) {
          return;
        }
        if(voteButtonUp.matches("[aria-pressed=true]")) {
          voteUpForm.classList.remove("hide");
          voteDownForm.classList.add("hide");
          return;
        }
        else if(voteButtonDown.matches("[aria-pressed=true]")) {
          voteDownForm.classList.remove("hide");
          voteUpForm.classList.add("hide");
          return;
        }
        else {
          successMessage.classList.add("hide");
          voteDownForm.classList.add("hide");
          voteUpForm.classList.add("hide");
          return;
        }
      });

      observer.observe(voteButtonUp, {
        attributes: true,
        attributeFilter: ['aria-pressed'],
      });
      observer.observe(voteButtonDown, {
        attributes: true,
        attributeFilter: ['aria-pressed'],
      });
    }
  };
English (US)
Deutsch
Espa√±ol (Latinoam√©rica)
Espa√±ol (Espa√±a)
Fran√ßais
Êó•Êú¨Ë™û
ÌïúÍµ≠Ïñ¥
Nederlands (Nederland)
Polski (Polska)
Portugu√™s do Brasil
$(function(){
                // bind change event to select
                $('#locale-picker').on('change', function () {
                    var url = $(this).val(); // get selected value
                    if (url) { // require a URL
                        window.location = url; // redirect
                    }
                    return false;
                });
                });
Use cases
UI design
UX design
Prototyping
Graphic design
Wireframing
Brainstorming
Templates
Remote design
Explore
Design features
Prototyping features
Design systems features
Collaboration features
FigJam
Pricing
Enterprise
Students and educators
Customers
Security
Integrations
Contact
Resources
Blog
Best practices
Support
Developers
Learn design
Downloads
What's new
Releases
Careers
About us
Agency partners
Privacy
Status
/*

    Greetings sourcecode lurker!

    This is for internal Zendesk and legacy usage,
    we don't support or guarantee any of these values
    so please don't build stuff on top of them.

  */

  HelpCenter = {};
  HelpCenter.account = {"subdomain":"figma","environment":"production","name":"Figma"};
  HelpCenter.user = {"identifier":"da39a3ee5e6b4b0d3255bfef95601890afd80709","email":null,"name":"","role":"anonymous","avatar_url":"https://assets.zendesk.com/hc/assets/default_avatar.png","is_admin":false,"organizations":[],"groups":[]};
  HelpCenter.internal = {"asset_url":"//static.zdassets.com/hc/assets/","web_widget_asset_composer_url":"https://static.zdassets.com/ekr/snippet.js","current_session":{"locale":"en-us","csrf_token":null,"shared_csrf_token":null},"usage_tracking":{"event":"article_viewed","data":"BAh7CDoLbG9jYWxlSSIKZW4tdXMGOgZFVDoPYXJ0aWNsZV9pZGwrCBfBdFY5HToKX21ldGF7DDoPYWNjb3VudF9pZGkDV0qOOhNoZWxwX2NlbnRlcl9pZGwrCNXztNFTADoNYnJhbmRfaWRsKwgN59TRUwA6DHVzZXJfaWQwOhN1c2VyX3JvbGVfbmFtZUkiDkFOT05ZTU9VUwY7BlQ7AEkiCmVuLXVzBjsGVDoaYW5vbnltb3VzX3RyYWNraW5nX2lkMA==--938e5e37511672f4d9df402c0bce13bc88187245","url":"https://help.figma.com/hc/activity"},"current_record_id":"32132100833559","current_record_url":"/hc/en-us/articles/32132100833559-Guide-to-the-Dev-Mode-MCP-Server","current_record_title":"Guide to the Dev Mode MCP Server","current_text_direction":"ltr","current_brand_id":360002676493,"current_brand_name":"Figma","current_brand_url":"https://figma.zendesk.com","current_brand_active":true,"current_path":"/hc/en-us/articles/32132100833559-Guide-to-the-Dev-Mode-MCP-Server","show_autocomplete_breadcrumbs":true,"user_info_changing_enabled":false,"has_user_profiles_enabled":true,"has_end_user_attachments":true,"user_aliases_enabled":false,"has_anonymous_kb_voting":true,"has_multi_language_help_center":true,"show_at_mentions":false,"embeddables_config":{"embeddables_web_widget":true,"embeddables_help_center_auth_enabled":false,"embeddables_connect_ipms":false},"answer_bot_subdomain":"static","general_settings_url":"https://help.figma.com/hc/admin/general_settings?locale=en-us","user_segments_url":"https://figma.zendesk.com/knowledge/user_segments?brand_id=360002676493","has_gather":true,"has_ckeditor":false,"has_community_enabled":false,"has_community_badges":true,"has_community_post_content_tagging":false,"has_gather_content_tags":true,"has_guide_content_tags":true,"has_user_segments":true,"has_answer_bot_web_form_enabled":false,"has_garden_modals":false,"theming_cookie_key":"hc-da39a3ee5e6b4b0d3255bfef95601890afd80709-2-preview","is_preview":false,"has_alternate_templates":true,"arrange_articles_url":"https://figma.zendesk.com/knowledge/arrange?brand_id=360002676493","article_verification_url":"https://figma.zendesk.com/knowledge/verification?brand_id=360002676493","has_article_verification":true,"guide_language_settings_url":"https://help.figma.com/hc/admin/language_settings?locale=en-us","docs_importer_url":"https://figma.zendesk.com/knowledge/import_articles?brand_id=360002676493","content_tags_url":"https://figma.zendesk.com/knowledge/content_tags?brand_id=360002676493","community_badges_url":"https://figma.zendesk.com/knowledge/community_badges?brand_id=360002676493","community_settings_url":"https://figma.zendesk.com/knowledge/community_settings?brand_id=360002676493","gather_plan_state":"subscribed","search_settings_url":"https://figma.zendesk.com/knowledge/search_settings?brand_id=360002676493","has_search_settings_in_plan":true,"theming_api_version":2,"theming_settings":{"brand_color":"#000000","brand_text_color":"#FFFFFF","text_color":"#545454","link_color":"#5551FF","background_color":"#FFFFFF","header_background_color":"#FFFFFF","header_link_color":"#000000","footer_background_color":"#FFFFFF","footer_text_color":"#000000","heading_font":"-apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif","text_font":"-apple-system, BlinkMacSystemFont, 'Segoe UI', Helvetica, Arial, sans-serif","logo":"/hc/theming_assets/01HZFG1N1QJPKABHT3PHQQ0J9J","favicon":"/hc/theming_assets/01HZFG1NHWKZA6P3KEG8EQ31YX","hero_image_visibility":false,"homepage_banner_bg_color":"#FFFFFF","homepage_background_image":"/hc/theming_assets/01HZFG1P7YTYN0F6FBWXEAJPAV","chero_image_visibility":true,"community_banner_bg_color":"#FFFFFF","community_background_image":"/hc/theming_assets/01HZFG1P7YTYN0F6FBWXEAJPAV","error_image":"/hc/theming_assets/01HZFG1Q8NQDVZP9YJXP59F2SZ","welcome_message_text":"Welcome to the Figma Help Center","welcome_message_text_dc":"NONE","welcome_message_text_color":"#000000","alter_welcome_message_text":"Learn and level up","alter_welcome_message_text_dc":"NONE","alter_welcome_text_color":"#000000","search_placeholder_text":"Search Components, Styles, Smart Selections","search_placeholder_text_dc":"NONE","category_block_visibility":false,"custom_block_visibility":true,"show_knowledge_base_tree":false,"first_block_icon":"/hc/theming_assets/01HZFG1QQWRMWCNW3CW3C84PSD","first_block_title_color":"rgba(0, 0, 0, 1)","first_block_title":"","first_block_title_dc":"help_center_category_blocks_getting_started","first_block_url":"https://figma.zendesk.com/hc/en-us/categories/360002051613-Getting-Started","second_block_icon":"/hc/theming_assets/01HZFG1R8PB98V9D16W0S2HYAM","second_block_title_color":"rgba(0, 0, 0, 1)","second_block_title":"","second_block_title_dc":"help_center_category_blocks_figma_organization","second_block_url":"https://help.figma.com/hc/en-us/sections/360006606913-Organizations","third_block_icon":"/hc/theming_assets/01HZFG1RQZN8KY9VTPB439AKC0","third_block_title_color":"rgba(0, 0, 0, 1)","third_block_title":"","third_block_title_dc":"help_center_category_blocks_community","third_block_url":"https://help.figma.com/hc/en-us/categories/360002772634-Community#Figma-Community","fourth_block_icon":"/hc/theming_assets/01HZFG1S5DVRJB5R24H5QVQQP3","fourth_block_title_color":"rgba(0, 0, 0, 1)","fourth_block_title":"","fourth_block_title_dc":"help_center_category_blocks_administration","fourth_block_url":"https://figma.zendesk.com/hc/en-us/categories/360001980773-Administration","fifth_block_icon":"/hc/theming_assets/01HZFG1DMFKVD0FXM4JPGAN809","fifth_block_title_color":"rgba(0, 0, 0, 1)","fifth_block_title":"","fifth_block_title_dc":"help_center_category_blocks_video_tutorials","fifth_block_url":"https://www.youtube.com/channel/UCQsVmhSa4X-G3lHlUtejzLA","sixth_block_icon":"/hc/theming_assets/01HZFG1SY15B659D2G6CYTD460","sixth_block_title_color":"rgba(0, 0, 0, 1)","sixth_block_title":"","sixth_block_title_dc":"help_center_category_blocks_components","sixth_block_url":"https://figma.zendesk.com/hc/en-us/categories/360002042553-Using-Figma#Components","seventh_block_icon":"/hc/theming_assets/01HZFG1TCYCSSNN6TQ6GN08FG2","seventh_block_title_color":"rgba(0, 0, 0, 1)","seventh_block_title":"","seventh_block_title_dc":"help_center_footer_downloads","seventh_block_url":"https://www.figma.com/downloads/","eighth_block_icon":"/hc/theming_assets/01HZFG1TVY2ZTK75Q3SMFNG75W","eighth_block_title_color":"rgba(0, 0, 0, 1)","eighth_block_title":"","eighth_block_title_dc":"help_center_footer_blog","eighth_block_url":"https://www.figma.com/blog/","show_follow_button":false,"hide_search_result_sidebar":true,"comment_block_visibility":false,"show_articles_in_section":false,"author_meta_details_visibility":false,"show_follow_article":false,"social_share_visibility":false,"twitter_link":"https://twitter.com/figmadesign","facebook_link":"https://www.facebook.com/figmadesign","medium_link":"https://medium.com/figma-design","instagram_link":"https://www.instagram.com/figmadesign/"},"has_pci_credit_card_custom_field":true,"help_center_restricted":false,"is_assuming_someone_else":false,"flash_messages":[],"user_photo_editing_enabled":true,"user_preferred_locale":"en-us","base_locale":"en-us","has_user_session_cookie_enabled":true,"has_custom_statuses_enabled":false,"has_hc_generative_answers_setting_enabled":true,"has_generative_search_with_zgpt_enabled":false,"has_guide_service_catalog":true,"has_remove_breadcrumbs":true,"has_csat_reverse_2_scale_in_mobile":false,"version":"v26396"};